<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="only.leo.wfm.core.dao.BaseConfigDOMapper">
  <resultMap id="BaseResultMap" type="only.leo.wfm.common.beans.BaseConfigDO">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="domain" jdbcType="VARCHAR" property="domain" />
    <result column="init" jdbcType="BIT" property="init" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="only.leo.wfm.common.beans.BaseConfigDO">
    <result column="other_files" jdbcType="LONGVARCHAR" property="otherFiles" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, domain, init
  </sql>
  <sql id="Blob_Column_List">
    other_files
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="only.leo.wfm.common.beans.BaseConfigDOExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from BASE_CONFIG_TABLE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="only.leo.wfm.common.beans.BaseConfigDOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from BASE_CONFIG_TABLE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from BASE_CONFIG_TABLE
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from BASE_CONFIG_TABLE
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="only.leo.wfm.common.beans.BaseConfigDOExample">
    delete from BASE_CONFIG_TABLE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="only.leo.wfm.common.beans.BaseConfigDO">
    insert into BASE_CONFIG_TABLE (id, domain, init, 
      other_files)
    values (#{id,jdbcType=INTEGER}, #{domain,jdbcType=VARCHAR}, #{init,jdbcType=BIT}, 
      #{otherFiles,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="only.leo.wfm.common.beans.BaseConfigDO">
    insert into BASE_CONFIG_TABLE
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="domain != null">
        domain,
      </if>
      <if test="init != null">
        init,
      </if>
      <if test="otherFiles != null">
        other_files,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="domain != null">
        #{domain,jdbcType=VARCHAR},
      </if>
      <if test="init != null">
        #{init,jdbcType=BIT},
      </if>
      <if test="otherFiles != null">
        #{otherFiles,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="only.leo.wfm.common.beans.BaseConfigDOExample" resultType="java.lang.Long">
    select count(*) from BASE_CONFIG_TABLE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update BASE_CONFIG_TABLE
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.domain != null">
        domain = #{record.domain,jdbcType=VARCHAR},
      </if>
      <if test="record.init != null">
        init = #{record.init,jdbcType=BIT},
      </if>
      <if test="record.otherFiles != null">
        other_files = #{record.otherFiles,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update BASE_CONFIG_TABLE
    set id = #{record.id,jdbcType=INTEGER},
      domain = #{record.domain,jdbcType=VARCHAR},
      init = #{record.init,jdbcType=BIT},
      other_files = #{record.otherFiles,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update BASE_CONFIG_TABLE
    set id = #{record.id,jdbcType=INTEGER},
      domain = #{record.domain,jdbcType=VARCHAR},
      init = #{record.init,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="only.leo.wfm.common.beans.BaseConfigDO">
    update BASE_CONFIG_TABLE
    <set>
      <if test="domain != null">
        domain = #{domain,jdbcType=VARCHAR},
      </if>
      <if test="init != null">
        init = #{init,jdbcType=BIT},
      </if>
      <if test="otherFiles != null">
        other_files = #{otherFiles,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="only.leo.wfm.common.beans.BaseConfigDO">
    update BASE_CONFIG_TABLE
    set domain = #{domain,jdbcType=VARCHAR},
      init = #{init,jdbcType=BIT},
      other_files = #{otherFiles,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="only.leo.wfm.common.beans.BaseConfigDO">
    update BASE_CONFIG_TABLE
    set domain = #{domain,jdbcType=VARCHAR},
      init = #{init,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>